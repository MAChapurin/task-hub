generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  login        String  @unique
  passwordHash String
  salt         String  @default("")
  email        String
  name         String
  surname      String
  avatarUrl    String?

  ownedProjects       Project[]            @relation("UserOwnedProjects")
  projectParticipants ProjectParticipant[]
  stats               UserProjectStat[]
  sentMessages        Message[]            @relation("SentMessages")
  chatParticipants    ChatParticipant[]
}

model Project {
  id      String   @id @default(cuid())
  title   String
  dueDate DateTime
  icon    String
  status  String   @default("BACKLOG")
  ownerId String
  owner   User     @relation("UserOwnedProjects", fields: [ownerId], references: [id])

  tasks        Task[]               @relation("ProjectTasks")
  participants ProjectParticipant[]
}

enum TaskStatus {
  BACKLOG
  IN_PROGRESS
  DONE
}

model Task {
  id            String     @id @default(cuid())
  title         String
  createdAt     DateTime   @default(now())
  startDate     DateTime?
  completedAt   DateTime?
  status        TaskStatus @default(BACKLOG)
  durationHours Float?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], name: "ProjectTasks")
}

model ProjectParticipant {
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model UserProjectStat {
  id       String   @id @default(cuid())
  userId   String
  date     DateTime @default(now())
  projects Int

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ChatParticipant[]
  messages     Message[]         @relation("ChatMessages")

  lastMessageId String?  @unique
  lastMessage   Message? @relation("LastChatMessage", fields: [lastMessageId], references: [id])
}

model ChatParticipant {
  userId String
  chatId String

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@id([userId, chatId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  senderId String
  chatId   String

  sender User @relation("SentMessages", fields: [senderId], references: [id])
  chat   Chat @relation("ChatMessages", fields: [chatId], references: [id])

  chatAsLastMessage Chat? @relation("LastChatMessage")
}
